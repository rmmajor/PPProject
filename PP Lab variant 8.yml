openapi: 3.0.3
info:
  title: PP Lab variant 8
  version: 0.0.1
tags:
  - name: event
    description: Everything about event
  - name: ticket
    description: Info about tickets
  - name: user
    description: Operations about user
paths:
  /event:
    post:
      tags:
        - event
      summary: Add new event
      description: This can only be done by the admin.
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        default:
          description: succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      security:
        - admin_auth:
            - write:event
  /event/{id}:
    delete:
      tags:
        - event
      summary: Delete event with provided Id
      description: This can only be done by the admin.
      parameters:
        - name: id
          in: path
          description: id of updated event
          required: true
          schema:
            type: string
      responses:
        '404':
          description: Event not found
        '200':
          description: successful operation
      security:
        - admin_auth:
            - write:event
    put:
      tags:
        - event
      summary: Update event
      description: This can only be done by the Admin.
      parameters:
        - name: id
          in: path
          description: id of updated event
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '404':
          description: Event not found
        default:
          description: successful operation
      security:
        - admin_auth:
            - write:event
    get:
      tags:
        - event
      summary: Get event
      description: Get info about event by id
      parameters:
        - name: id
          in: path
          description: id of updated event
          required: true
          schema:
            type: string
      responses:
        '404':
          description: event not found
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /event/{id}/tickets:
    get:
      tags:
        - event
      summary: Get All tickets reserved or bought for this event
      parameters:
        - name: id
          in: path
          description: id of updated event
          required: true
          schema:
            type: string
      responses:
        '404':
          description: event not found
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfTickets'
  /ticket:
    post:
      tags:
        - ticket
      summary: Add new ticket
      requestBody:
        description: Created ticket object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '404':
          description: Not found event
        '409':
          description: This seat is already reserved
        '406':
          description: Failed to reserve this ticket
        default:
          description: succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
      security:
        - user_auth:
            - write:ticket
  /ticket/{id}:
    delete:
      tags:
        - ticket
      summary: Delete ticket with provided Id
      parameters:
        - name: id
          in: path
          description: id of deleted ticket
          required: true
          schema:
            type: string
      responses:
        '404':
          description: Ticket not found
        default:
          description: successful operation
      security:
        - user_auth:
            - write:ticket
    put:
      tags:
        - ticket
      summary: Update ticket
      parameters:
        - name: id
          in: path
          description: id of updated event
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent ticket
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '400':
          description: ticket not found
        default:
          description: successful operation
      security:
        - user_auth:
            - write:ticket
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: 'Create new account'
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username/password supplied
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: 'This action allow you to logout '
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      security:
        - user_auth:
            - read:user
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: 'Return information of user'
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
      security:
        - user_auth:
          - read:user
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - user_auth:
          - read:user
  /user/{username}/tickets:
    get:
      tags:
        - user
      summary: Get user by user name
      description: 'This can only be done by the logged in user.'
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '404':
          description: User not found
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfTickets'
      security:
        - user_auth:
            - read:user
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        Role:
          type: string
          example: user
      xml:
        name: user
    UserRegister:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
      xml:
        name: userRegister
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
      xml:
        name: userLogin
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        phone:
          type: string
          example: '12345'
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Name of Event
        address:
          type: string
          example: st. Steapana Bandery 16
        datetime:
          type: string
          format: date
          example: 12-01-2023
        tickets_count:
          type: integer
          example: 1000
      xml:
        name: event
    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        event_id:
          type: integer
          format: int64
          example: 10
        user_id:
          type: integer
          format: int64
          example: 10
        seat:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: bought
      xml:
        name: ticket
    ArrayOfTickets:
      type: array
      items:
        $ref: '#/components/schemas/Ticket'
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://ticketstore.swagger.io/oauth/authorize
          scopes:
            write:ticket: manage your tickets
            read:ticket: read your tickets
            read:event: read events
    admin_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://ticketstore.swagger.io/oauth/authorize
          scopes:
            write:ticket: manage events
    api_key:
      type: apiKey
      name: api_key
      in: header
